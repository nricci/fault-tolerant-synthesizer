
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 02 19:19:31 GMT-03:00 2013
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import dctl.formulas.*;
import java.util.Set;
import java.util.HashSet;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 02 19:19:31 GMT-03:00 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\005\006\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\024\004\017\007\006\010\012\011\014\012" +
    "\016\016\011\017\007\020\004\021\005\001\002\000\004" +
    "\004\056\001\002\000\004\004\053\001\002\000\016\005" +
    "\ufffe\006\ufffe\013\ufffe\014\ufffe\015\ufffe\023\ufffe\001\002" +
    "\000\004\004\050\001\002\000\004\002\047\001\002\000" +
    "\004\004\033\001\002\000\016\005\ufffd\006\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\023\ufffd\001\002\000\024\004\017\007" +
    "\006\010\012\011\014\012\016\016\011\017\007\020\004" +
    "\021\005\001\002\000\016\005\ufffc\006\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\023\ufffc\001\002\000\012\006\031\013\023" +
    "\014\024\015\021\001\002\000\024\004\017\007\006\010" +
    "\012\011\014\012\016\016\011\017\007\020\004\021\005" +
    "\001\002\000\024\004\017\007\006\010\012\011\014\012" +
    "\016\016\011\017\007\020\004\021\005\001\002\000\012" +
    "\005\022\013\023\014\024\015\021\001\002\000\024\004" +
    "\017\007\006\010\012\011\014\012\016\016\011\017\007" +
    "\020\004\021\005\001\002\000\016\005\ufff7\006\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\023\ufff7\001\002\000\024\004\017" +
    "\007\006\010\012\011\014\012\016\016\011\017\007\020" +
    "\004\021\005\001\002\000\024\004\017\007\006\010\012" +
    "\011\014\012\016\016\011\017\007\020\004\021\005\001" +
    "\002\000\016\005\ufff9\006\ufff9\013\023\014\ufff9\015\ufff9" +
    "\023\ufff9\001\002\000\016\005\ufffa\006\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\023\ufffa\001\002\000\016\005\ufff8\006\ufff8" +
    "\013\023\014\024\015\ufff8\023\ufff8\001\002\000\016\005" +
    "\ufffb\006\ufffb\013\ufffb\014\ufffb\015\ufffb\023\ufffb\001\002" +
    "\000\024\004\uffff\007\uffff\010\uffff\011\uffff\012\uffff\016" +
    "\uffff\017\uffff\020\uffff\021\uffff\001\002\000\004\002\001" +
    "\001\002\000\032\004\017\007\006\010\012\011\014\012" +
    "\016\016\011\017\007\020\004\021\005\022\035\024\040" +
    "\025\034\001\002\000\024\004\017\007\006\010\012\011" +
    "\014\012\016\016\011\017\007\020\004\021\005\001\002" +
    "\000\024\004\017\007\006\010\012\011\014\012\016\016" +
    "\011\017\007\020\004\021\005\001\002\000\004\005\044" +
    "\001\002\000\012\013\023\014\024\015\021\023\042\001" +
    "\002\000\024\004\017\007\006\010\012\011\014\012\016" +
    "\016\011\017\007\020\004\021\005\001\002\000\012\005" +
    "\ufff1\013\023\014\024\015\021\001\002\000\024\004\017" +
    "\007\006\010\012\011\014\012\016\016\011\017\007\020" +
    "\004\021\005\001\002\000\012\005\uffef\013\023\014\024" +
    "\015\021\001\002\000\016\005\ufff6\006\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\023\ufff6\001\002\000\012\005\ufff2\013\023" +
    "\014\024\015\021\001\002\000\012\005\ufff0\013\023\014" +
    "\024\015\021\001\002\000\004\002\000\001\002\000\032" +
    "\004\017\007\006\010\012\011\014\012\016\016\011\017" +
    "\007\020\004\021\005\022\035\024\040\025\034\001\002" +
    "\000\004\005\052\001\002\000\016\005\ufff5\006\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\023\ufff5\001\002\000\032\004\017" +
    "\007\006\010\012\011\014\012\016\016\011\017\007\020" +
    "\004\021\005\022\035\024\040\025\034\001\002\000\004" +
    "\005\055\001\002\000\016\005\ufff4\006\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\023\ufff4\001\002\000\032\004\017\007\006" +
    "\010\012\011\014\012\016\016\011\017\007\020\004\021" +
    "\005\022\035\024\040\025\034\001\002\000\004\005\060" +
    "\001\002\000\016\005\ufff3\006\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\023\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\010\002\007\003\012\005\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\031\003\012\005\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\027\001\001\000" +
    "\004\005\017\001\001\000\002\001\001\000\004\005\026" +
    "\001\001\000\002\001\001\000\004\005\025\001\001\000" +
    "\004\005\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\035\005\036\001\001\000\004" +
    "\005\045\001\001\000\004\005\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\040\001\001\000\002" +
    "\001\001\000\004\005\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\050\005\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\053\005\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\056\005" +
    "\036\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	Set<DCTLFormula> _spec;

	public static Set<DCTLFormula> parse_specification(String file) throws Exception{
		if (file == null) 
			throw new Exception("The path to the file containing the specification must be supplied.");
		SymbolFactory sf = new DefaultSymbolFactory();
		Parser p = new Parser(new Scanner(new java.io.FileInputStream(file),sf),sf);
		p._spec = new HashSet<DCTLFormula>();
		p.parse();		
		return p._spec;
	}

	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		if (args.length==0) new Parser(new Scanner(System.in,sf),sf).parse();
		else new Parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // path_form ::= state_form UNTIL state_form 
            {
              DCTLFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DCTLFormula p = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DCTLFormula q = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Formula(Type.UNTIL, null, p, q); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // path_form ::= GLOBALLY state_form 
            {
              DCTLFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DCTLFormula p = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Formula(Type.GLOBALLY, null, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // path_form ::= FUTURE state_form 
            {
              DCTLFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DCTLFormula p = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Formula(Type.FUTURE, null, p); 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // path_form ::= NEXT state_form 
            {
              DCTLFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DCTLFormula p = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Formula(Type.NEXT, null, p); 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // state_form ::= PERMISSION LPAREN path_form RPAREN 
            {
              DCTLFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DCTLFormula p = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Formula(Type.PERMISSION, null, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // state_form ::= OBLIGATION LPAREN path_form RPAREN 
            {
              DCTLFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DCTLFormula p = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Formula(Type.OBLIGATION, null, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // state_form ::= FORALL LPAREN path_form RPAREN 
            {
              DCTLFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DCTLFormula p = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Formula(Type.FORALL, null, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // state_form ::= EXISTS LPAREN path_form RPAREN 
            {
              DCTLFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DCTLFormula p = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Formula(Type.EXISTS, null, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // state_form ::= LPAREN state_form RPAREN 
            {
              DCTLFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DCTLFormula p = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // state_form ::= state_form IMPLIES state_form 
            {
              DCTLFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DCTLFormula p = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DCTLFormula q = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Formula(Type.IMPLIES, null, p, q); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // state_form ::= state_form OR state_form 
            {
              DCTLFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DCTLFormula p = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DCTLFormula q = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Formula(Type.OR, null, p, q);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // state_form ::= state_form AND state_form 
            {
              DCTLFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DCTLFormula p = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DCTLFormula q = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Formula(Type.AND, null, p, q);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // state_form ::= NEG state_form 
            {
              DCTLFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DCTLFormula p = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Formula(Type.NEGATION, null, p);		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // state_form ::= ID 
            {
              DCTLFormula RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Formula(Type.PROPOSITION, i);  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // state_form ::= FALSE 
            {
              DCTLFormula RESULT =null;
		 RESULT = new Formula(Type.FALSE,null); 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // state_form ::= TRUE 
            {
              DCTLFormula RESULT =null;
		 RESULT = new Formula(Type.TRUE,null);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // formula ::= state_form SEMI 
            {
              DCTLFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DCTLFormula s = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formula",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= specification EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // specification ::= formula specification 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DCTLFormula f = (DCTLFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser._spec.add(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specification",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

