
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 03 15:03:10 GMT-03:00 2014
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import tableaux.*;
import dctl.formulas.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 03 15:03:10 GMT-03:00 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\007\000\002\002\004\000\002\003" +
    "\005\000\002\005\005\000\002\005\003\000\002\004\004" +
    "\000\002\004\003\000\002\006\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\004\000\002" +
    "\007\005\000\002\007\007\000\002\007\007\000\002\007" +
    "\005\000\002\007\005\000\002\007\007\000\002\007\005" +
    "\000\002\007\007\000\002\007\004\000\002\007\006\000" +
    "\002\007\004\000\002\007\006\000\002\007\004\000\002" +
    "\007\006\000\002\007\004\000\002\007\006\000\002\010" +
    "\004\000\002\010\006\000\002\010\004\000\002\010\006" +
    "\000\002\010\004\000\002\010\006\000\002\010\005\000" +
    "\002\010\007\000\002\010\005\000\002\010\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\004\012\004\001\002\000\004\033\140\001" +
    "\002\000\004\002\137\001\002\000\004\015\007\001\002" +
    "\000\024\004\013\005\014\006\010\007\011\016\023\023" +
    "\012\024\015\025\022\033\017\001\002\000\032\004\013" +
    "\005\014\006\010\007\011\010\056\011\063\016\134\020" +
    "\057\023\012\024\015\025\022\033\017\001\002\000\032" +
    "\004\013\005\014\006\010\007\011\010\056\011\063\016" +
    "\130\020\057\023\012\024\015\025\022\033\017\001\002" +
    "\000\022\017\ufff9\021\ufff9\022\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\001\002\000\032\004\013\005\014" +
    "\006\010\007\011\010\056\011\063\016\124\020\057\023" +
    "\012\024\015\025\022\033\017\001\002\000\032\004\013" +
    "\005\014\006\010\007\011\010\056\011\063\016\062\020" +
    "\057\023\012\024\015\025\022\033\017\001\002\000\022" +
    "\017\ufff8\021\ufff8\022\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\001\002\000\030\002\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\013\ufffb\016\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\033\ufffb\001\002\000\022\017\ufff7\021\ufff7\022\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\001\002\000" +
    "\026\004\013\005\014\006\010\007\011\013\054\016\023" +
    "\023\012\024\015\025\022\033\017\001\002\000\014\026" +
    "\033\027\035\030\034\031\036\032\052\001\002\000\024" +
    "\004\013\005\014\006\010\007\011\016\023\023\012\024" +
    "\015\025\022\033\017\001\002\000\024\004\013\005\014" +
    "\006\010\007\011\016\023\023\012\024\015\025\022\033" +
    "\017\001\002\000\012\026\025\027\027\030\026\031\030" +
    "\001\002\000\024\004\013\005\014\006\010\007\011\016" +
    "\023\023\012\024\015\025\022\033\017\001\002\000\024" +
    "\004\013\005\014\006\010\007\011\016\023\023\012\024" +
    "\015\025\022\033\017\001\002\000\024\004\013\005\014" +
    "\006\010\007\011\016\023\023\012\024\015\025\022\033" +
    "\017\001\002\000\024\004\013\005\014\006\010\007\011" +
    "\016\023\023\012\024\015\025\022\033\017\001\002\000" +
    "\020\017\032\021\ufff2\022\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\031\ufff2\001\002\000\022\017\ufff3\021\ufff3\022\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\001\002\000\024" +
    "\004\013\005\014\006\010\007\011\016\023\023\012\024" +
    "\015\025\022\033\017\001\002\000\024\004\013\005\014" +
    "\006\010\007\011\016\023\023\012\024\015\025\022\033" +
    "\017\001\002\000\024\004\013\005\014\006\010\007\011" +
    "\016\023\023\012\024\015\025\022\033\017\001\002\000" +
    "\024\004\013\005\014\006\010\007\011\016\023\023\012" +
    "\024\015\025\022\033\017\001\002\000\022\017\ufff2\021" +
    "\ufff2\022\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\001\002\000\022\017\uffef\021\uffef\022\uffef\026\uffef\027" +
    "\uffef\030\034\031\036\032\uffef\001\002\000\022\017\ufff5" +
    "\021\ufff5\022\ufff5\026\ufff5\027\ufff5\030\ufff5\031\036\032" +
    "\ufff5\001\002\000\022\017\ufff1\021\ufff1\022\ufff1\026\ufff1" +
    "\027\035\030\034\031\036\032\ufff1\001\002\000\020\017" +
    "\044\021\uffef\022\uffef\026\uffef\027\uffef\030\034\031\036" +
    "\001\002\000\022\017\uffee\021\uffee\022\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\uffee\032\uffee\001\002\000\020\017\046" +
    "\021\ufff5\022\ufff5\026\ufff5\027\ufff5\030\ufff5\031\036\001" +
    "\002\000\022\017\ufff4\021\ufff4\022\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\001\002\000\020\017\050\021" +
    "\ufff1\022\ufff1\026\ufff1\027\035\030\034\031\036\001\002" +
    "\000\022\017\ufff0\021\ufff0\022\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\001\002\000\022\017\ufff6\021\ufff6" +
    "\022\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\001" +
    "\002\000\030\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\013\ufffa\016\ufffa\023\ufffa\024\ufffa\025\ufffa\033\ufffa\001" +
    "\002\000\030\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\013\ufffc\016\ufffc\023\ufffc\024\ufffc\025\ufffc\033\ufffc\001" +
    "\002\000\024\004\013\005\014\006\010\007\011\016\023" +
    "\023\012\024\015\025\022\033\017\001\002\000\026\002" +
    "\001\004\013\005\014\006\010\007\011\016\023\023\012" +
    "\024\015\025\022\033\017\001\002\000\024\004\013\005" +
    "\014\006\010\007\011\016\120\023\012\024\015\025\022" +
    "\033\017\001\002\000\024\004\013\005\014\006\010\007" +
    "\011\016\114\023\012\024\015\025\022\033\017\001\002" +
    "\000\022\017\uffeb\021\uffeb\022\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\001\002\000\016\021\107\022\110" +
    "\026\033\027\035\030\034\031\036\001\002\000\032\004" +
    "\013\005\014\006\010\007\011\010\056\011\063\016\072" +
    "\020\057\023\012\024\015\025\022\033\017\001\002\000" +
    "\024\004\013\005\014\006\010\007\011\016\065\023\012" +
    "\024\015\025\022\033\017\001\002\000\022\017\uffe1\021" +
    "\uffe1\022\uffe1\026\033\027\035\030\034\031\036\032\uffe1" +
    "\001\002\000\024\004\013\005\014\006\010\007\011\016" +
    "\023\023\012\024\015\025\022\033\017\001\002\000\014" +
    "\017\067\026\025\027\027\030\026\031\030\001\002\000" +
    "\022\017\uffe0\021\uffe0\022\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\001\002\000\004\017\106\001\002\000" +
    "\016\021\102\022\103\026\025\027\027\030\026\031\030" +
    "\001\002\000\024\004\013\005\014\006\010\007\011\016" +
    "\023\023\012\024\015\025\022\033\017\001\002\000\016" +
    "\021\074\022\075\026\025\027\027\030\026\031\030\001" +
    "\002\000\024\004\013\005\014\006\010\007\011\016\023" +
    "\023\012\024\015\025\022\033\017\001\002\000\024\004" +
    "\013\005\014\006\010\007\011\016\023\023\012\024\015" +
    "\025\022\033\017\001\002\000\014\017\077\026\033\027" +
    "\035\030\034\031\036\001\002\000\022\017\uffde\021\uffde" +
    "\022\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\001" +
    "\002\000\014\017\101\026\033\027\035\030\034\031\036" +
    "\001\002\000\022\017\uffdc\021\uffdc\022\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\001\002\000\024\004\013" +
    "\005\014\006\010\007\011\016\023\023\012\024\015\025" +
    "\022\033\017\001\002\000\024\004\013\005\014\006\010" +
    "\007\011\016\023\023\012\024\015\025\022\033\017\001" +
    "\002\000\014\017\077\026\033\027\035\030\034\031\036" +
    "\001\002\000\014\017\101\026\033\027\035\030\034\031" +
    "\036\001\002\000\022\017\uffea\021\uffea\022\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\001\002\000\024\004" +
    "\013\005\014\006\010\007\011\016\023\023\012\024\015" +
    "\025\022\033\017\001\002\000\024\004\013\005\014\006" +
    "\010\007\011\016\023\023\012\024\015\025\022\033\017" +
    "\001\002\000\022\017\uffdf\021\uffdf\022\uffdf\026\uffdf\027" +
    "\uffdf\030\034\031\036\032\uffdf\001\002\000\022\017\uffdd" +
    "\021\uffdd\022\uffdd\026\033\027\035\030\034\031\036\032" +
    "\uffdd\001\002\000\022\017\uffe5\021\uffe5\022\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\001\002\000\024\004" +
    "\013\005\014\006\010\007\011\016\023\023\012\024\015" +
    "\025\022\033\017\001\002\000\014\017\116\026\025\027" +
    "\027\030\026\031\030\001\002\000\022\017\uffe4\021\uffe4" +
    "\022\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\001" +
    "\002\000\022\017\uffe3\021\uffe3\022\uffe3\026\033\027\035" +
    "\030\034\031\036\032\uffe3\001\002\000\024\004\013\005" +
    "\014\006\010\007\011\016\023\023\012\024\015\025\022" +
    "\033\017\001\002\000\014\017\122\026\025\027\027\030" +
    "\026\031\030\001\002\000\022\017\uffe2\021\uffe2\022\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\001\002\000" +
    "\022\017\uffed\021\uffed\022\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\001\002\000\032\004\013\005\014\006" +
    "\010\007\011\010\056\011\063\016\072\020\057\023\012" +
    "\024\015\025\022\033\017\001\002\000\004\017\126\001" +
    "\002\000\022\017\uffec\021\uffec\022\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\001\002\000\022\017\uffe7\021" +
    "\uffe7\022\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\001\002\000\032\004\013\005\014\006\010\007\011\010" +
    "\056\011\063\016\072\020\057\023\012\024\015\025\022" +
    "\033\017\001\002\000\004\017\132\001\002\000\022\017" +
    "\uffe6\021\uffe6\022\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\001\002\000\022\017\uffe9\021\uffe9\022\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\001\002\000\032" +
    "\004\013\005\014\006\010\007\011\010\056\011\063\016" +
    "\072\020\057\023\012\024\015\025\022\033\017\001\002" +
    "\000\004\017\136\001\002\000\022\017\uffe8\021\uffe8\022" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\001\002" +
    "\000\004\002\000\001\002\000\006\014\143\032\ufffd\001" +
    "\002\000\004\032\142\001\002\000\004\015\uffff\001\002" +
    "\000\004\033\140\001\002\000\004\032\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\006\002\004\003\005\001\001\000\004\005" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\017\006\015\007\020\001\001\000\006\007\060\010" +
    "\132\001\001\000\006\007\060\010\126\001\001\000\002" +
    "\001\001\000\006\007\060\010\122\001\001\000\006\007" +
    "\060\010\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\052\007\020\001\001\000" +
    "\002\001\001\000\004\007\050\001\001\000\004\007\023" +
    "\001\001\000\002\001\001\000\004\007\046\001\001\000" +
    "\004\007\044\001\001\000\004\007\042\001\001\000\004" +
    "\007\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\041\001\001\000\004\007\040\001\001\000\004" +
    "\007\037\001\001\000\004\007\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\054\006\015\007\020\001\001\000\006\006\052\007\020" +
    "\001\001\000\004\007\116\001\001\000\004\007\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\070" +
    "\010\067\001\001\000\004\007\063\001\001\000\002\001" +
    "\001\000\004\007\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\072\001\001\000\002\001\001\000\004\007\077\001\001" +
    "\000\004\007\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\104" +
    "\001\001\000\004\007\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\111\001\001" +
    "\000\004\007\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\070\010\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\070" +
    "\010\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\070\010\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\143" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Specification _spec;
    public static Specification parse_specification(String file) throws Exception{
        if (file == null)
            throw new Exception("The path to the file containing the specification must be supplied.");
        SymbolFactory sf = new DefaultSymbolFactory();
        Parser p = new Parser(new Scanner(new java.io.FileInputStream(file),sf),sf);
        p._spec = new Specification();
        p.parse();
        return p._spec;
    }
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		if (args.length==0) new Parser(new Scanner(System.in,sf),sf).parse();
		else new Parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // path_form ::= LPAREN state_form WEAKUNTIL state_form RPAREN 
            {
              PathFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WeakUntil(p, q); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // path_form ::= state_form WEAKUNTIL state_form 
            {
              PathFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WeakUntil(p, q); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // path_form ::= LPAREN state_form UNTIL state_form RPAREN 
            {
              PathFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Until(p, q); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // path_form ::= state_form UNTIL state_form 
            {
              PathFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Until(p, q); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // path_form ::= FUTURE LPAREN state_form RPAREN 
            {
              PathFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StateFormula s = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Until(new True(), s); 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // path_form ::= FUTURE state_form 
            {
              PathFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula s = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Until(new True(), s); 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // path_form ::= GLOBALLY LPAREN state_form RPAREN 
            {
              PathFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StateFormula s = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Globally(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // path_form ::= GLOBALLY state_form 
            {
              PathFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula s = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Globally(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // path_form ::= NEXT LPAREN state_form RPAREN 
            {
              PathFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StateFormula s = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Next(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // path_form ::= NEXT state_form 
            {
              PathFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula s = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Next(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // state_form ::= OBLIGATION LPAREN path_form RPAREN 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PathFormula p = (PathFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Obligation(p);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // state_form ::= OBLIGATION path_form 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PathFormula p = (PathFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Obligation(p);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // state_form ::= PERMISSION LPAREN path_form RPAREN 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PathFormula p = (PathFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Permission(p);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // state_form ::= PERMISSION path_form 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PathFormula p = (PathFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Permission(p);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // state_form ::= FORALL LPAREN path_form RPAREN 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PathFormula p = (PathFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Forall(p);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // state_form ::= FORALL path_form 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PathFormula p = (PathFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Forall(p);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // state_form ::= EXIST LPAREN path_form RPAREN 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PathFormula p = (PathFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Exists(p);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // state_form ::= EXIST path_form 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PathFormula p = (PathFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exists(p);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // state_form ::= LPAREN state_form EQUIVALENCE state_form RPAREN 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new Equivalence(p,q);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // state_form ::= state_form EQUIVALENCE state_form 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new Equivalence(p,q);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // state_form ::= LPAREN state_form IMPLIES state_form RPAREN 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Implication(p, q);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // state_form ::= state_form IMPLIES state_form 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Implication(p, q);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // state_form ::= state_form OR state_form 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Or(p, q);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // state_form ::= LPAREN state_form OR state_form RPAREN 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Or(p, q);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // state_form ::= LPAREN state_form AND state_form RPAREN 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new And(p, q);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // state_form ::= state_form AND state_form 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(p, q);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // state_form ::= NEG state_form 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Negation(p);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // state_form ::= ID 
            {
              StateFormula RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Proposition(i);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // state_form ::= FALSE 
            {
              StateFormula RESULT =null;
		 RESULT = new False();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // state_form ::= TRUE 
            {
              StateFormula RESULT =null;
		 RESULT = new True(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formula ::= state_form SEMI 
            {
              StateFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StateFormula s = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formula",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // formulas ::= formula 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula f = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser._spec.add_formula(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formulas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // formulas ::= formulas formula 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula f = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser._spec.add_formula(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formulas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_list ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser._spec.add_ivar(new Proposition(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // var_list ::= ID COMMA var_list 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  parser._spec.add_ivar(new Proposition(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // interface ::= INTERFACE var_list SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interface",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= global_spec EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // global_spec ::= interface INITIALSTATE formulas SPECIFICATION formulas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_spec",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

