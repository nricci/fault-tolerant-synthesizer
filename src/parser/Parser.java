
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 13 13:58:28 GMT-03:00 2013
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import dctl.formulas.*;
import java.util.Set;
import java.util.HashSet;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 13 13:58:28 GMT-03:00 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\004\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\006\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\024\004\017\007\006\010\012\011\013\012" +
    "\016\016\011\017\010\020\004\021\005\001\002\000\004" +
    "\004\056\001\002\000\004\004\053\001\002\000\016\005" +
    "\ufffd\006\ufffd\013\ufffd\014\ufffd\015\ufffd\023\ufffd\001\002" +
    "\000\004\002\052\001\002\000\004\004\047\001\002\000" +
    "\004\004\033\001\002\000\016\005\ufffc\006\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\023\ufffc\001\002\000\016\005\ufffb\006" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\023\ufffb\001\002\000\026" +
    "\002\uffff\004\017\007\006\010\012\011\013\012\016\016" +
    "\011\017\010\020\004\021\005\001\002\000\012\006\031" +
    "\013\023\014\024\015\022\001\002\000\024\004\017\007" +
    "\006\010\012\011\013\012\016\016\011\017\010\020\004" +
    "\021\005\001\002\000\024\004\017\007\006\010\012\011" +
    "\013\012\016\016\011\017\010\020\004\021\005\001\002" +
    "\000\012\005\021\013\023\014\024\015\022\001\002\000" +
    "\016\005\ufff6\006\ufff6\013\ufff6\014\ufff6\015\ufff6\023\ufff6" +
    "\001\002\000\024\004\017\007\006\010\012\011\013\012" +
    "\016\016\011\017\010\020\004\021\005\001\002\000\024" +
    "\004\017\007\006\010\012\011\013\012\016\016\011\017" +
    "\010\020\004\021\005\001\002\000\024\004\017\007\006" +
    "\010\012\011\013\012\016\016\011\017\010\020\004\021" +
    "\005\001\002\000\016\005\ufff8\006\ufff8\013\023\014\ufff8" +
    "\015\ufff8\023\ufff8\001\002\000\016\005\ufff9\006\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\023\ufff9\001\002\000\016\005\ufff7" +
    "\006\ufff7\013\023\014\024\015\ufff7\023\ufff7\001\002\000" +
    "\016\005\ufffa\006\ufffa\013\ufffa\014\ufffa\015\ufffa\023\ufffa" +
    "\001\002\000\026\002\ufffe\004\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\012\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\001\002" +
    "\000\004\002\001\001\002\000\032\004\017\007\006\010" +
    "\012\011\013\012\016\016\011\017\010\020\004\021\005" +
    "\022\035\024\040\025\034\001\002\000\024\004\017\007" +
    "\006\010\012\011\013\012\016\016\011\017\010\020\004" +
    "\021\005\001\002\000\024\004\017\007\006\010\012\011" +
    "\013\012\016\016\011\017\010\020\004\021\005\001\002" +
    "\000\004\005\044\001\002\000\012\013\023\014\024\015" +
    "\022\023\042\001\002\000\024\004\017\007\006\010\012" +
    "\011\013\012\016\016\011\017\010\020\004\021\005\001" +
    "\002\000\012\005\ufff0\013\023\014\024\015\022\001\002" +
    "\000\024\004\017\007\006\010\012\011\013\012\016\016" +
    "\011\017\010\020\004\021\005\001\002\000\012\005\uffee" +
    "\013\023\014\024\015\022\001\002\000\016\005\ufff5\006" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\023\ufff5\001\002\000\012" +
    "\005\ufff1\013\023\014\024\015\022\001\002\000\012\005" +
    "\uffef\013\023\014\024\015\022\001\002\000\032\004\017" +
    "\007\006\010\012\011\013\012\016\016\011\017\010\020" +
    "\004\021\005\022\035\024\040\025\034\001\002\000\004" +
    "\005\051\001\002\000\016\005\ufff4\006\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\023\ufff4\001\002\000\004\002\000\001\002" +
    "\000\032\004\017\007\006\010\012\011\013\012\016\016" +
    "\011\017\010\020\004\021\005\022\035\024\040\025\034" +
    "\001\002\000\004\005\055\001\002\000\016\005\ufff3\006" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\023\ufff3\001\002\000\032" +
    "\004\017\007\006\010\012\011\013\012\016\016\011\017" +
    "\010\020\004\021\005\022\035\024\040\025\034\001\002" +
    "\000\004\005\060\001\002\000\016\005\ufff2\006\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\023\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\010\002\006\003\013\004\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\031\003\013\004\014" +
    "\001\001\000\002\001\001\000\004\004\027\001\001\000" +
    "\004\004\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\026\001\001\000\004\004\025\001\001\000" +
    "\004\004\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\036\005\035\001\001\000\004" +
    "\004\045\001\001\000\004\004\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\040\001\001\000\002" +
    "\001\001\000\004\004\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\036\005\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\036\005\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\036\005" +
    "\056\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	Set<StateFormula> _spec;

	public static Set<StateFormula> parse_specification(String file) throws Exception{
		if (file == null) 
			throw new Exception("The path to the file containing the specification must be supplied.");
		SymbolFactory sf = new DefaultSymbolFactory();
		Parser p = new Parser(new Scanner(new java.io.FileInputStream(file),sf),sf);
		p._spec = new HashSet<StateFormula>();
		p.parse();		
		return p._spec;
	}

	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		if (args.length==0) new Parser(new Scanner(System.in,sf),sf).parse();
		else new Parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // path_form ::= state_form UNTIL state_form 
            {
              PathFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Until(p, q); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // path_form ::= GLOBALLY state_form 
            {
              PathFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WeakUntil(p, new False()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // path_form ::= FUTURE state_form 
            {
              PathFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Until(new True(), p); 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // path_form ::= NEXT state_form 
            {
              PathFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Next(p); 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path_form",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // state_form ::= PERMISSION LPAREN path_form RPAREN 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PathFormula p = (PathFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Permission(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // state_form ::= OBLIGATION LPAREN path_form RPAREN 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PathFormula p = (PathFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Obligation(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // state_form ::= FORALL LPAREN path_form RPAREN 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PathFormula p = (PathFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Forall(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // state_form ::= EXISTS LPAREN path_form RPAREN 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PathFormula p = (PathFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Exists(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // state_form ::= LPAREN state_form RPAREN 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // state_form ::= state_form IMPLIES state_form 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Or(new Negation(p), q); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // state_form ::= state_form OR state_form 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Or(p,q);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // state_form ::= state_form AND state_form 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula q = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(p,q);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // state_form ::= NEG state_form 
            {
              StateFormula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula p = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Negation(p);		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // state_form ::= ID 
            {
              StateFormula RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Proposition(i);  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // state_form ::= FALSE 
            {
              StateFormula RESULT =null;
		 RESULT = new False(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // state_form ::= TRUE 
            {
              StateFormula RESULT =null;
		 RESULT = new True();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // formula ::= state_form SEMI 
            {
              StateFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StateFormula s = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formula",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // specification ::= formula 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StateFormula f = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser._spec.add(f);System.out.println(":O " + parser._spec.contains(f)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specification",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= specification EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // specification ::= formula specification 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StateFormula f = (StateFormula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser._spec.add(f);System.out.println(":O " + parser._spec.contains(f)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specification",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

