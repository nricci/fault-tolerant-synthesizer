/* The following code was generated by JFlex 1.4.1 on 3/07/14 15:16 */

package parser;

import java_cup.runtime.SymbolFactory;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 3/07/14 15:16 from the specification file
 * <tt>/Users/nricci/Google Drive/Programming/fault-tolerant-synthesizer/src/parser/Scanner.jflex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 44,  2,  0, 44,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6, 39,  0,  0,  0,  0, 42,  0, 29, 30,  5,  0, 21,  7,  0,  4, 
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32,  0, 22, 41,  0, 40,  0, 
     0, 23,  0,  0,  0, 24, 27, 28,  0,  8,  0,  0,  0,  0,  0, 26, 
    25,  0,  0, 18, 36, 34,  0, 35, 33,  0,  0,  0,  0,  0,  0, 32, 
     0, 14, 31, 15, 31, 11, 13, 31, 31, 16, 31, 31, 17, 31,  9, 20, 
    19, 31, 12, 38, 10, 37, 31, 31, 31, 31, 31,  0, 43,  3,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\1\1\21\3\1\3\0\1\22\3\0"+
    "\1\23\1\24\7\0\1\25\3\0\1\26\3\0\1\27"+
    "\3\0\1\30\17\0\1\31\6\0\1\32\1\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[78];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\55\0\132\0\207\0\264\0\55\0\55"+
    "\0\55\0\55\0\55\0\55\0\341\0\55\0\55\0\55"+
    "\0\55\0\55\0\55\0\u010e\0\55\0\u013b\0\u0168\0\u0195"+
    "\0\u01c2\0\u01ef\0\u021c\0\55\0\u0249\0\u0276\0\u02a3\0\55"+
    "\0\55\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de"+
    "\0\55\0\u040b\0\u0438\0\u0465\0\55\0\u0492\0\u04bf\0\u04ec"+
    "\0\55\0\u0519\0\u0546\0\u0573\0\55\0\u05a0\0\u05cd\0\u05fa"+
    "\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762"+
    "\0\u078f\0\u07bc\0\u07e9\0\u0816\0\55\0\u0843\0\u0870\0\u089d"+
    "\0\u08ca\0\u08f7\0\u0924\0\55\0\u0951\0\55";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[78];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\2\1\3\1\5\1\2"+
    "\11\6\1\2\2\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\6\1\2\1\21"+
    "\1\22\1\23\1\24\2\6\1\25\1\2\1\26\1\27"+
    "\1\30\1\3\61\0\1\31\1\32\56\0\1\33\40\0"+
    "\1\34\15\0\11\6\1\0\2\6\12\0\2\6\4\0"+
    "\2\6\24\0\1\35\52\0\1\36\47\0\1\37\117\0"+
    "\1\40\55\0\1\41\7\0\1\42\46\0\5\43\1\44"+
    "\47\43\10\0\1\45\11\0\1\46\53\0\1\47\100\0"+
    "\1\50\57\0\1\51\4\0\1\42\1\52\1\53\52\42"+
    "\5\43\1\54\47\43\4\0\1\55\1\44\60\0\1\56"+
    "\66\0\1\57\77\0\1\60\21\0\1\61\43\0\1\53"+
    "\1\55\54\0\1\55\51\0\4\43\1\55\1\54\47\43"+
    "\12\0\1\62\5\0\1\63\47\0\1\64\54\0\1\65"+
    "\54\0\1\66\53\0\1\67\61\0\1\70\51\0\1\71"+
    "\60\0\1\72\54\0\1\73\51\0\1\74\55\0\1\75"+
    "\53\0\1\76\55\0\1\77\57\0\1\100\53\0\1\101"+
    "\53\0\1\102\57\0\1\103\51\0\1\104\50\0\1\105"+
    "\53\0\1\106\60\0\1\107\54\0\1\110\50\0\1\111"+
    "\54\0\1\112\62\0\1\113\47\0\1\114\65\0\1\115"+
    "\41\0\1\116\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2430];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\6\11\1\1\6\11\1\1\1\11"+
    "\3\1\3\0\1\11\3\0\2\11\7\0\1\11\3\0"+
    "\1\11\3\0\1\11\3\0\1\11\17\0\1\11\6\0"+
    "\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[78];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public Scanner(java.io.InputStream r, SymbolFactory sf){
		this(r);
		this.sf=sf;
	}
	private SymbolFactory sf;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { return sf.newSymbol("Specification",sym.SPECIFICATION, new String(yytext()));
          }
        case 28: break;
        case 10: 
          { return sf.newSymbol("Future",sym.FUTURE, new String(yytext()));
          }
        case 29: break;
        case 1: 
          { System.err.println("Illegal character: "+yytext());
          }
        case 30: break;
        case 7: 
          { return sf.newSymbol("Exist",sym.EXIST, new String(yytext()));
          }
        case 31: break;
        case 25: 
          { return sf.newSymbol("Interface",sym.INTERFACE, new String(yytext()));
          }
        case 32: break;
        case 16: 
          { return sf.newSymbol("WeakUntil",sym.WEAKUNTIL, new String(yytext()) );
          }
        case 33: break;
        case 21: 
          { return sf.newSymbol("Equivalence",sym.EQUIVALENCE, new String(yytext()));
          }
        case 34: break;
        case 4: 
          { return sf.newSymbol("Semicolon",sym.COMMA, new String(yytext()));
          }
        case 35: break;
        case 11: 
          { return sf.newSymbol("Globally",sym.GLOBALLY, new String(yytext()));
          }
        case 36: break;
        case 17: 
          { return sf.newSymbol("Negation",sym.NEG, new String(yytext()) );
          }
        case 37: break;
        case 23: 
          { return sf.newSymbol("True Value",sym.TRUE, new String(yytext()) );
          }
        case 38: break;
        case 6: 
          { return sf.newSymbol("For All",sym.FORALL, new String(yytext()));
          }
        case 39: break;
        case 15: 
          { return sf.newSymbol("Until",sym.UNTIL, new String(yytext()) );
          }
        case 40: break;
        case 8: 
          { return sf.newSymbol("Permission",sym.PERMISSION, new String(yytext()) );
          }
        case 41: break;
        case 20: 
          { return sf.newSymbol("Logic OR",sym.OR, new String(yytext()));
          }
        case 42: break;
        case 18: 
          { return sf.newSymbol("Implication",sym.IMPLIES, new String(yytext()));
          }
        case 43: break;
        case 9: 
          { return sf.newSymbol("Obligation",sym.OBLIGATION, new String(yytext()));
          }
        case 44: break;
        case 14: 
          { return sf.newSymbol("Next",sym.NEXT, new String(yytext()));
          }
        case 45: break;
        case 26: 
          { return sf.newSymbol("INITIALSTATE",sym.INITIALSTATE, new String(yytext()));
          }
        case 46: break;
        case 13: 
          { return sf.newSymbol("Right Bracket",sym.RPAREN, new String(yytext()));
          }
        case 47: break;
        case 5: 
          { return sf.newSymbol("Semicolon",sym.SEMI, new String(yytext()));
          }
        case 48: break;
        case 24: 
          { return sf.newSymbol("True Value",sym.FALSE, new String(yytext()) );
          }
        case 49: break;
        case 3: 
          { return sf.newSymbol("identifier",sym.ID, new String(yytext()));
          }
        case 50: break;
        case 19: 
          { return sf.newSymbol("Logic AND",sym.AND, new String(yytext()));
          }
        case 51: break;
        case 2: 
          { /* ignore white space. */
          }
        case 52: break;
        case 22: 
          { /* ignore */
          }
        case 53: break;
        case 12: 
          { return sf.newSymbol("Left Bracket",sym.LPAREN, new String(yytext()));
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return sf.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
