package parser;

import java_cup.runtime.*;
import tableaux.*;
import dctl.formulas.*;




parser code {:
    Specification _spec;
    public static Specification parse_specification(String file) throws Exception{
        if (file == null)
            throw new Exception("The path to the file containing the specification must be supplied.");
        SymbolFactory sf = new DefaultSymbolFactory();
        Parser p = new Parser(new Scanner(new java.io.FileInputStream(file),sf),sf);
        p._spec = new Specification();
        p.parse();
        return p._spec;
    }
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		if (args.length==0) new Parser(new Scanner(System.in,sf),sf).parse();
		else new Parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
	}
:}


terminal String EXIST, FORALL, PERMISSION, OBLIGATION, GLOBALLY, FUTURE, INTERFACE, SPECIFICATION, COMMA,
                INITIALSTATE,LPAREN, RPAREN, NEXT, WEAKUNTIL, UNTIL, TRUE,  NEG, IMPLIES, EQUIVALENCE, AND, OR, SEMI, ID;

non terminal global_spec, interface, formulas, var_list;
non terminal StateFormula formula, state_form;
non terminal PathFormula path_form;


precedence left IMPLIES;
precedence left EQUIVALENCE;
precedence left UNTIL;
precedence left AND;
precedence left OR;
precedence right NEXT;
precedence right NEG;
precedence left LPAREN;
precedence right RPAREN;


global_spec ::= interface 
				INITIALSTATE formulas
				SPECIFICATION formulas
			;
				
		

interface	::=	INTERFACE var_list SEMI
			;

var_list	::=	ID:i COMMA var_list			{:  parser._spec.add_ivar(new Proposition(i)); :}
			|	ID:i						{:  parser._spec.add_ivar(new Proposition(i)); :}
			;


formulas	::=	formulas formula:f		{: parser._spec.add_formula(f); :}
            | 	formula:f 				{: parser._spec.add_formula(f); :}
            ;

formula 	::= state_form:s SEMI		{: RESULT = s; :};
           



state_form	::=		TRUE:t 												{: RESULT = new True(); :}
            | 		ID:i 												{: RESULT = new Proposition(i);  :}
            | 		NEG state_form:p 									{: RESULT = new Negation(p);  :}
            
            | 		state_form:p AND state_form:q 						{: RESULT = new And(p, q);  :}
            | 		LPAREN state_form:p AND state_form:q RPAREN 		{: RESULT = new And(p, q);  :}

            | 		LPAREN state_form:p OR state_form:q RPAREN 			{: RESULT = new Or(p, q);  :}
            | 		state_form:p OR state_form:q 						{: RESULT = new Or(p, q);  :}

            | 		state_form:p IMPLIES state_form:q 					{: RESULT = new Implication(p, q);  :}
            | 		LPAREN state_form:p IMPLIES state_form:q RPAREN 	{: RESULT = new Implication(p, q);  :}

            |		state_form:p EQUIVALENCE state_form:q 				{:	RESULT = new Equivalence(p,q);	:}
            | 		LPAREN state_form:p EQUIVALENCE state_form:q RPAREN {:	RESULT = new Equivalence(p,q);	:}

            | 		EXIST path_form:p 									{: RESULT = new Exists(p);  :}
            | 		EXIST LPAREN path_form:p RPAREN 					{: RESULT = new Exists(p);  :}

            | 		FORALL path_form:p 									{: RESULT = new Forall(p);  :}
            | 		FORALL LPAREN path_form:p RPAREN 					{: RESULT = new Forall(p);  :}

            | 		PERMISSION path_form:p 								{: RESULT = new Permission(p);  :}
            | 		PERMISSION LPAREN path_form:p RPAREN 				{: RESULT = new Permission(p);  :}
            
            | 		OBLIGATION path_form:p 								{: RESULT = new Obligation(p);  :}
            | 		OBLIGATION LPAREN path_form:p RPAREN 				{: RESULT = new Obligation(p);  :}          
	    ;


path_form	::= 	NEXT state_form:s 									{: RESULT = new Next(s); :}
           	| 		NEXT LPAREN state_form:s RPAREN 					{: RESULT = new Next(s); :} 

            | 		GLOBALLY state_form:s 								{: RESULT = new Globally(s); :}
            | 		GLOBALLY LPAREN state_form:s RPAREN 				{: RESULT = new Globally(s); :}

            |		FUTURE state_form:s 								{: RESULT = new Until(new True(), s); 	:}
            | 		FUTURE LPAREN state_form:s RPAREN 					{: RESULT = new Until(new True(), s); 	:}

            |		state_form:p UNTIL state_form:q 					{: RESULT = new Until(p, q); :}
            |		LPAREN state_form:p UNTIL state_form:q RPAREN 		{: RESULT = new Until(p, q); :}

            |		state_form:p WEAKUNTIL state_form:q 				{: RESULT = new WeakUntil(p, q); :}
            |		LPAREN state_form:p WEAKUNTIL state_form:q RPAREN 	{: RESULT = new WeakUntil(p, q); :}
		;




